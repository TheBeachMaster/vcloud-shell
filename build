#!/usr/bin/env bash

readonly tab=$'\t'
function informationMessage()
{
	local messageKind="$1"
	local message="$2"
	
	case "$messageKind" in
		
		WARN|FAIL)
			echo "$ourName: $messageKind: $message" 1>&2
		;;
		
		DEBUG)
			if [ "$beDebug" = "yes" ]; then
				echo "$ourName: $messageKind: $message" 1>&2
			fi
		;;
		
		*)
			if [ "$beVerbose" = "yes" ]; then
				echo "$ourName: $messageKind: $message" 1>&2
			fi
		;;
	
	esac
}

# The purpose of these functions is to provide internal implementations of logic we can't be 100%
# sure of exists in the environment or is implemented as we would like for critical pieces of code.
# Such a critical piece is code executed before and during command line arg parsing (eg exitError)
function purebash_dirname()
{
	local -r converted="${1%/*}"
	if [ "$converted" = "$1" ]; then
		echo "."
	else
		echo "$converted"
	fi
}

function purebash_basename()
{
	echo "${1##*/}"
}

function findOurNameAndPath()
{
	readonly ourName="$(purebash_basename "$0")"
	pushd "$(purebash_dirname "$0")" >/dev/null
		readonly crudeOurPath="$(pwd)"
	popd >/dev/null
}

function setPaths()
{
	pushd "$crudeOurPath" 1>/dev/null 2>/dev/null
		
		readonly rootPath="$(pwd)"
		
	popd 1>/dev/null 2>/dev/null
	
	readonly sourcePath="$rootPath"/source
	readonly functionsPath="$sourcePath"/functions
	readonly outputPath="$rootPath"/output
}

function sourceFunctions()
{
	source "$functionsPath"/temporaryFiles.functions
	source "$functionsPath"/trapHandlers.functions
	source "$functionsPath"/language.functions
}

function copyToOutputFolder()
{
	rm -rf "$outputPath"
	mkdir -m 0755 -p "$outputPath"
	
	readonly binFolder="$outputPath"/usr/bin
	mkdir "$binFolder"
	
	readonly vcloudCurlFile="$outputPath"/usr/bin/vcloud-curl
	cp "$sourcePath"/vcloud-curl "$vcloudCurlFile"
	chmod 0755 "$vcloudCurlFile"
	
	local -r etcFolder="$outputPath"/etc
	rsync -a "$sourcePath"/config "$etcFolder"/vcloud-curl.d/
}

function concatenateFunctions()
{
	temporaryFiles_newFileToRemoveOnExit
	readonly temporaryConcatenatedFunctions="$TMP_FILE"
	
	(
		pushd "$functionsPath" 1>/dev/null 2>/dev/null
		
			local functionFile
			for functionFile in *.functions
			do
				if [ -f "$functionFile" ]; then
					cat "$functionFile"
				fi
			done
		
			local functionFolder
			for functionFolder in *
			do
				if [ -d "$functionFolder" ]; then
					concatenateFunctions "$functionFolder"
				fi
			done
		
		popd 1>/dev/null 2>/dev/null
	) >"$temporaryConcatenatedFunctions"
}

function generateEdScriptForFunctions()
{
	temporaryFiles_newFileToRemoveOnExit
	readonly temporaryPatchFile="$TMP_FILE"
	
	# We'll use patch with an ed script
	# Find first line number (one-based)
	local -ir startingLineNumber=$(grep --line-number '^#start VCLOUD_CURL_SOURCE_FUNCTIONS' "$vcloudCurlFile" | head -n 1 | cut -d':' -f1)
	local -ir endingLineNumber=$(grep --line-number '^#end VCLOUD_CURL_SOURCE_FUNCTIONS' "$vcloudCurlFile" | head -n 1 | cut -d':' -f1)
	
	# Generate an ed script
	(
		echo "${startingLineNumber},${endingLineNumber}c"
		cat "$temporaryConcatenatedFunctions"
		echo "."
	) >"$temporaryPatchFile"
}

function patchFunctions()
{
	patch --ed "$vcloudCurlFile" "$temporaryPatchFile"
}

function main()
{
	findOurNameAndPath
	setPaths
	sourceFunctions
	
	trapHandlers_addNext temporaryFiles_removeAll
	copyToOutputFolder
	concatenateFunctions
	generateEdScriptForFunctions
	patchFunctions
	
	# we can model the paths using bash's alias command; but package-manager.functions is harder to work with
}

main "$@"






function multilineSed()
{
	local -r searchForPattern="$1"
	local -r replacePattern="$2"
	# line feeds can be replaced with ; to make a concise one-liner
	# Inspiration from http://austinmatzko.com/2008/04/26/sed-multi-line-search-and-replace/
	# And http://www.refining-linux.org/archives/27/20-Multi-line-sed-search-and-replace/
	sed -n '
# if the first line copy the pattern to the hold buffer
1h
# if not the first line then append the pattern to the hold buffer
1!H
# if the last line then ...
$ {
    # copy from the hold to the pattern buffer
    g
    # do the search and replace
    s/<h2.*</h2>/No title here/g
    # print
    p
}
'
}

# Or  sed -e '/<h2/,/<\/h2>/{s/<h2.*/No text here/p;d}' sample.php