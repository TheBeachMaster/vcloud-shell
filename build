#!/usr/bin/env bash

readonly tab=$'\t'
function informationMessage()
{
	local messageKind="$1"
	local message="$2"
	
	case "$messageKind" in
		
		WARN|FAIL)
			echo "$ourName: $messageKind: $message" 1>&2
		;;
		
		DEBUG)
			if [ "$switch_beDebug" = "yes" ]; then
				echo "$ourName: $messageKind: $message" 1>&2
			fi
		;;
		
		*)
			if [ "$switch_beVerbose" = "yes" ]; then
				echo "$ourName: $messageKind: $message" 1>&2
			fi
		;;
	
	esac
}

# The purpose of these functions is to provide internal implementations of logic we can't be 100%
# sure of exists in the environment or is implemented as we would like for critical pieces of code.
# Such a critical piece is code executed before and during command line arg parsing (eg exitError)
function purebash_dirname()
{
	local -r converted="${1%/*}"
	if [ "$converted" = "$1" ]; then
		echo "."
	else
		echo "$converted"
	fi
}

function purebash_basename()
{
	echo "${1##*/}"
}

function setDebugging()
{
	# is set -x on?
	if [[ "$-" == *x* ]]; then
		export VCLOUD_CURL_BASH_DEBUGGING="yes"
	elif [ ! -z "$VCLOUD_CURL_BASH_DEBUGGING" ]; then
		if [ "$VCLOUD_CURL_BASH_DEBUGGING" = "yes" ]; then
			set -x
		fi
	fi
}

function setSaneEnvironmentDefaults()
{
	set +o allexport -o braceexpand +o emacs -o errexit +o errtrace +o functrace +o hashall +o histexpand +o history +o ignoreeof -o interactive-comments +o keyword +o monitor +o noclobber +o noexec +o noglob +o nolog +o notify +o nounset +o onecmd +o physical +o pipefail +o posix +o verbose +o vi
	
	unset BASH_ENV
	unset BASH_XTRACEFD
	unset CDPATH
	unset ENV
	unset FCEDIT
	unset FIGNORE
	unset FUNCNEST
	unset GLOBIGNORE
	unset HISTCONTROL
	unset HISTFILE
	unset HISTFILESIZE
	unset HISTIGNORE
	unset HISTSIZE
	unset HISTTIMEFORMAT
	unset HOSTFILE
	unset IGNOREEOF
	unset INPUTRC
	unset MAIL
	unset MAILCHECK
	unset MAILPATH
	unset TMOUT
	
	umask 022
}

function findOurNameAndPath()
{
	readonly ourName="$(purebash_basename "$0")"
	pushd "$(purebash_dirname "$0")" >/dev/null
		readonly crudeOurPath="$(pwd)"
	popd >/dev/null
}

function setPaths()
{
	pushd "$crudeOurPath" 1>/dev/null 2>/dev/null
		
		readonly rootPath="$(pwd)"
		
	popd 1>/dev/null 2>/dev/null
	
	readonly sourcePath="$rootPath"/source
	readonly functionsPath="$sourcePath"/functions
	readonly outputPath="$rootPath"/output
}

function sourceFunctions()
{
	source "$functionsPath"/temporaryFiles.functions
	source "$functionsPath"/trapHandlers.functions
	source "$functionsPath"/language.functions
}

function setInstallPaths()
{
	readonly etcPath="/etc"
	readonly binPath="/usr/bin"
}

function copyToOutputFolder()
{
	rm -rf "$outputPath"
	mkdir -m 0755 -p "$outputPath"
	
	readonly binFolder="${outputPath}${binPath}"
	readonly etcFolder="${outputPath}${etcPath}"
	
	mkdir -m 0755 -p "$binFolder"
	mkdir -m 0755 -p "$etcFolder"
	
	readonly vcloudCurlFile="$binFolder"/vcloud-curl
	cp "$sourcePath"/vcloud-curl "$vcloudCurlFile"
	chmod 0755 "$vcloudCurlFile"
	
	readonly switch_configPath="$etcFolder"/vcloud-curl
	mkdir -m 0755 -p "$switch_configPath"
	
	rsync -a --exclude=.gitignore "$sourcePath"/config/ "$switch_configPath"/
}

function patchConfigPaths()
{
	sed -e "s;etcPath=.*$;etcPath='${etcPath}';g" "$vcloudCurlFile" >"$vcloudCurlFile".new
	rm "$vcloudCurlFile"
	mv "$vcloudCurlFile".new "$vcloudCurlFile"
	
	sed -e 's;switch_configPath=.*$;switch_configPath="$etcPath"/"$ourName";g' "$vcloudCurlFile" >"$vcloudCurlFile".new
	rm "$vcloudCurlFile"
	mv "$vcloudCurlFile".new "$vcloudCurlFile"
}

function concatenateDefaults()
{
	temporaryFiles_newFileToRemoveOnExit
	readonly temporaryConcatenatedDefaults="$TMP_FILE"
	
	cat "$switch_configPath"/defaults "$switch_configPath"/defaults.d/*.defaults >"$temporaryConcatenatedDefaults"
}

function generateEdScriptForDefaults()
{
	temporaryFiles_newFileToRemoveOnExit
	readonly temporaryDefaultsPatchFile="$TMP_FILE"
	
	# We'll use patch with an ed script
	# Find first line number (one-based)
	local -ir startingLineNumber=$(grep --line-number '^#start VCLOUD_CURL_DEFAULTS' "$vcloudCurlFile" | head -n 1 | cut -d':' -f1)
	local -ir endingLineNumber=$(grep --line-number '^#end VCLOUD_CURL_DEFAULTS' "$vcloudCurlFile" | head -n 1 | cut -d':' -f1)
	
	# Generate an ed script
	(
		echo "${startingLineNumber},${endingLineNumber}c"
		cat "$temporaryConcatenatedDefaults"
		echo "."
	) >"$temporaryDefaultsPatchFile"
}

function patchDefaults()
{
	patch --ed "$vcloudCurlFile" "$temporaryDefaultsPatchFile"
}

function concatenateFunctionsAll()
{
	temporaryFiles_newFileToRemoveOnExit
	readonly temporaryConcatenatedFunctions="$TMP_FILE"
	(
		cat <<-EOF
			function sourceFunctions()
			{
			    :
			}
		EOF
	) >"$temporaryConcatenatedFunctions"
	concatenateFunctionsRecursively "$functionsPath"
}

function concatenateFunctionsRecursively()
{
	(
		pushd "$1" 1>/dev/null 2>/dev/null
		
			local functionFile
			for functionFile in *.functions
			do
				if [ -f "$functionFile" ]; then
					cat "$functionFile"
					printf '\n'
				fi
			done
		
			local functionFolder
			for functionFolder in *
			do
				if [ -d "$functionFolder" ]; then
					concatenateFunctionsRecursively "$functionFolder"
				fi
			done
		
		popd 1>/dev/null 2>/dev/null
	) >>"$temporaryConcatenatedFunctions"
}

function generateEdScriptForFunctions()
{
	temporaryFiles_newFileToRemoveOnExit
	readonly temporaryFunctionsPatchFile="$TMP_FILE"
	
	# We'll use patch with an ed script
	# Find first line number (one-based)
	local -ir startingLineNumber=$(grep --line-number '^#start VCLOUD_CURL_SOURCE_FUNCTIONS' "$vcloudCurlFile" | head -n 1 | cut -d':' -f1)
	local -ir endingLineNumber=$(grep --line-number '^#end VCLOUD_CURL_SOURCE_FUNCTIONS' "$vcloudCurlFile" | head -n 1 | cut -d':' -f1)
	
	# Generate an ed script
	(
		echo "${startingLineNumber},${endingLineNumber}c"
		cat "$temporaryConcatenatedFunctions"
		echo "."
	) >"$temporaryFunctionsPatchFile"
}

function patchFunctions()
{
	patch --ed "$vcloudCurlFile" "$temporaryFunctionsPatchFile"
}

function main()
{
	setDebugging
	setSaneEnvironmentDefaults
	findOurNameAndPath
	setPaths
	sourceFunctions
	
	trapHandlers_addNext temporaryFiles_removeAll
	
	setInstallPaths
	copyToOutputFolder
	
	patchConfigPaths
	
	concatenateDefaults
	generateEdScriptForDefaults
	patchDefaults
	
	concatenateFunctionsAll
	generateEdScriptForFunctions
	patchFunctions
}

main "$@"
