#!/usr/bin/env bash

function vsh_message()
{
	local messageKind="$1"
	local message="$2"
	
	case "$messageKind" in
		
		WARN|FAIL)
			echo "$ourName: $messageKind: $message" 1>&2
		;;
		
		DEBUG)
			if [ "$vsh_beDebug" = "yes" ]; then
				echo "$ourName: $messageKind: $message" 1>&2
			fi
		;;
		
		*)
			if [ "$vsh_beVerbose" = "yes" ]; then
				echo "$ourName: $messageKind: $message" 1>&2
			fi
		;;
	
	esac
}

# The purpose of these functions is to provide internal implementations of logic we can't be 100%
# sure of exists in the environment or is implemented as we would like for critical pieces of code.
# Such a critical piece is code executed before and during command line arg parsing
function vsh_dirname()
{
	local -r converted="${1%/*}"
	if [ "$converted" = "$1" ]; then
		echo "."
	else
		echo "$converted"
	fi
}

function vsh_basename()
{
	echo "${1##*/}"
}

function build_setDebugging()
{
	# is set -x on?
	if [[ "$-" == *x* ]]; then
		export VSH_BASH_DEBUGGING="yes"
	elif [ ! -z "$VSH_BASH_DEBUGGING" ]; then
		if [ "$VSH_BASH_DEBUGGING" = "yes" ]; then
			set -x
		fi
	fi
}

function build_setSaneEnvironmentDefaults()
{
	set +o allexport -o braceexpand +o emacs -o errexit +o errtrace +o functrace +o hashall +o histexpand +o history +o ignoreeof -o interactive-comments +o keyword +o monitor +o noclobber +o noexec +o noglob +o nolog +o notify +o nounset +o onecmd +o physical +o pipefail +o posix +o verbose +o vi
	
	unset BASH_ENV
	unset BASH_XTRACEFD
	unset CDPATH
	unset ENV
	unset FCEDIT
	unset FIGNORE
	unset FUNCNEST
	unset GLOBIGNORE
	unset HISTCONTROL
	unset HISTFILE
	unset HISTFILESIZE
	unset HISTIGNORE
	unset HISTSIZE
	unset HISTTIMEFORMAT
	unset HOSTFILE
	unset IGNOREEOF
	unset INPUTRC
	unset MAIL
	unset MAILCHECK
	unset MAILPATH
	unset TMOUT
	
	umask 022
}

function build_findOurNameAndPath()
{
	readonly ourName="$(vsh_basename "$0")"
	pushd "$(vsh_dirname "$0")" >/dev/null
		readonly crudeOurPath="$(pwd)"
	popd >/dev/null
}

function build_setPaths()
{
	pushd "$crudeOurPath" 1>/dev/null 2>/dev/null
		
		readonly rootPath="$(pwd)"
		
	popd 1>/dev/null 2>/dev/null
	
	readonly sourcePath="$rootPath"/source
	readonly functionsPath="$sourcePath"/functions
	readonly outputPath="$rootPath"/output
}

function build_sourceFunctions()
{
	source "$functionsPath"/temporaryFiles.functions
	source "$functionsPath"/trapHandlers.functions
	source "$functionsPath"/language.functions
}

function build_setInstallPaths()
{
	readonly etcPath="/etc"
	readonly binPath="/usr/bin"
}

function build_copyToOutputFolder()
{
	rm -rf "$outputPath"
	mkdir -m 0755 -p "$outputPath"
	
	readonly binFolder="${outputPath}${binPath}"
	readonly etcFolder="${outputPath}${etcPath}"
	
	mkdir -m 0755 -p "$binFolder"
	mkdir -m 0755 -p "$etcFolder"
	
	readonly vcloudCurlFile="$binFolder"/vsh
	cp "$sourcePath"/vsh "$vcloudCurlFile"
	chmod 0755 "$vcloudCurlFile"
	
	readonly vsh_configPath="$etcFolder"/vsh
	mkdir -m 0755 -p "$vsh_configPath"
	
	rsync -a --exclude=.gitignore "$sourcePath"/config/ "$vsh_configPath"/
}

function build_patchConfigPaths()
{
	sed -e "s;etcPath=.*$;etcPath='${etcPath}';g" "$vcloudCurlFile" >"$vcloudCurlFile".new
	rm "$vcloudCurlFile"
	mv "$vcloudCurlFile".new "$vcloudCurlFile"
	
	sed -e 's;vsh_configPath=.*$;vsh_configPath="$etcPath"/"$ourName";g' "$vcloudCurlFile" >"$vcloudCurlFile".new
	rm "$vcloudCurlFile"
	mv "$vcloudCurlFile".new "$vcloudCurlFile"
}

function build_concatenateDefaults()
{
	temporaryFiles_newFileToRemoveOnExit
	readonly temporaryConcatenatedDefaults="$TMP_FILE"
	
	cat "$vsh_configPath"/defaults "$vsh_configPath"/defaults.d/*.defaults >"$temporaryConcatenatedDefaults"
}

function build_generateEdScriptForDefaults()
{
	temporaryFiles_newFileToRemoveOnExit
	readonly temporaryDefaultsPatchFile="$TMP_FILE"
	
	# We'll use patch with an ed script
	# Find first line number (one-based)
	local -ir startingLineNumber=$(grep --line-number '^#start VSH_DEFAULTS' "$vcloudCurlFile" | head -n 1 | cut -d':' -f1)
	local -ir endingLineNumber=$(grep --line-number '^#end VSH_DEFAULTS' "$vcloudCurlFile" | head -n 1 | cut -d':' -f1)
	
	# Generate an ed script
	(
		echo "${startingLineNumber},${endingLineNumber}c"
		cat "$temporaryConcatenatedDefaults"
		echo "."
	) >"$temporaryDefaultsPatchFile"
}

function build_patchDefaults()
{
	patch --ed "$vcloudCurlFile" "$temporaryDefaultsPatchFile"
}

function build_concatenateFunctionsAll()
{
	temporaryFiles_newFileToRemoveOnExit
	readonly temporaryConcatenatedFunctions="$TMP_FILE"
	(
		cat <<-EOF
			function vsh_sourceFunctions()
			{
			    :
			}
		EOF
	) >"$temporaryConcatenatedFunctions"
	concatenateFunctionsRecursively "$functionsPath"
}

function build_concatenateFunctionsRecursively()
{
	(
		pushd "$1" 1>/dev/null 2>/dev/null
		
			local functionFile
			for functionFile in *.functions
			do
				if [ -f "$functionFile" ]; then
					cat "$functionFile"
					printf '\n'
				fi
			done
		
			local functionFolder
			for functionFolder in *
			do
				if [ -d "$functionFolder" ]; then
					concatenateFunctionsRecursively "$functionFolder"
				fi
			done
		
		popd 1>/dev/null 2>/dev/null
	) >>"$temporaryConcatenatedFunctions"
}

function build_generateEdScriptForFunctions()
{
	temporaryFiles_newFileToRemoveOnExit
	readonly temporaryFunctionsPatchFile="$TMP_FILE"
	
	# We'll use patch with an ed script
	# Find first line number (one-based)
	local -ir startingLineNumber=$(grep --line-number '^#start VSH_SOURCE_FUNCTIONS' "$vcloudCurlFile" | head -n 1 | cut -d':' -f1)
	local -ir endingLineNumber=$(grep --line-number '^#end VSH_SOURCE_FUNCTIONS' "$vcloudCurlFile" | head -n 1 | cut -d':' -f1)
	
	# Generate an ed script
	(
		echo "${startingLineNumber},${endingLineNumber}c"
		cat "$temporaryConcatenatedFunctions"
		echo "."
	) >"$temporaryFunctionsPatchFile"
}

function build_patchFunctions()
{
	patch --ed "$vcloudCurlFile" "$temporaryFunctionsPatchFile"
}

function build_main()
{
	vsh_setDebugging
	vsh_setSaneEnvironmentDefaults
	vsh_findOurNameAndPath
	setPaths
	vsh_sourceFunctions
	
	trapHandlers_addNext temporaryFiles_removeAll
	
	build_setInstallPaths
	build_copyToOutputFolder
	
	build_patchConfigPaths
	
	build_concatenateDefaults
	build_generateEdScriptForDefaults
	build_patchDefaults
	
	build_concatenateFunctionsAll
	build_generateEdScriptForFunctions
	build_patchFunctions
}

build_main "$@"
