main_functions=()

function main_registerTrapHandlers()
{
	trapHandlers_addNext temporaryFiles_removeAll
}
main_functions+=(main_registerTrapHandlers)

function main_makeAllFunctionsReadonly()
{
	local unwanted1 unwanted2 functionName
	while IFS=' ' read -r unwanted1 unwanted2 functionName
	do
		readonly -f $functionName
	done < <(declare -F)
	readonly main_functions
}
main_functions+=(main_makeAllFunctionsReadonly)

function main_makeGlobalVariablesReadonly()
{
	readonly -a main_functions
}
main_functions+=(main_makeGlobalVariablesReadonly)

function main_loadDefaults()
{
	local defaultsFile="$vsh_configPath"/defaults
	if [ -r "$defaultsFile" ]; then
		source "$defaultsFile"
	fi
	
	local -r defaultsFolder="$vsh_configPath"/defaults.d
	if [ -d "$defaultsFolder" ]; then
		pushd "$defaultsFolder" 1>/dev/null 2>/dev/null
			
			for defaultsFile in *.defaults
			do
				if [ -f "$defaultsFile" ]; then
					source "$defaultsFile"
				fi
			done
			
		popd 1>/dev/null 2>/dev/null
	fi
}
main_functions+=(main_loadDefaults)

function main_validateDefault()
{
	local -r variableName="$1"
	
	if [ -z "${!variableName}" ]; then
		vsh_message FAIL "Default $variableName has no value"
	fi
}

function main_validateDefaults()
{
	main_validateDefault defaults_api_version
	main_validateDefault defaults_curl_userAgent
	main_validateDefault defaults_curl_maxRedirs
	main_validateDefault defaults_curl_retries
	main_validateDefault defaults_format_headings
	main_validateDefault defaults_format_separator
}
main_functions+=(main_validateDefaults)

function main_makeDefaultsReadonly()
{
	# defaults_format_headings, defaults_format_separator can not be readonly
	readonly defaults_api_version defaults_curl_userAgent defaults_curl_maxRedirs defaults_curl_retries
}
main_functions+=(main_makeDefaultsReadonly)

main_functions+=(dependency_installDependencies)

function main_welcome()
{
	if [ "${vsh_bePrompt}" = "yes" ]; then
		cat 1>&2 <<-EOF
			
			Welcome to vsh, the vCloud Shell
			Logging in, please wait...
		EOF
	fi
}
main_functions+=(main_welcome)

function main_login()
{
	api_session_versions
	
	api_session_sessions
	
	trapHandlers_addNext api_session_logout
	
	if [ "${vsh_bePrompt}" = "yes" ]; then
		cat 1>&2 <<-EOF
			Logged in.
			Please type commands at the 'vsh >' prompt
			Commands known are  ${api_commands[@]}
			You can also type any valid bash syntax
		EOF
	fi
}
main_functions+=(main_login)

function main_executeCommands()
{
	if [ "${vsh_bePrompt}" = "yes" ]; then
		(
			declare -a downloads=()
			declare -A api_downloadsCache
			local line
			local -i downloadNumber=0
			
			while true
			do
				read -e -p "${ourName}> " -r line
				
				eval "${line}"
			done
		)
		return 0
	fi
	
	# Uses a subshell so we don't affect the core program
	local -i stdinAlreadyUsed=0
	local scriptFile
	for scriptFile in "${vsh_scriptFiles[@]}"
	do
		if [ "$scriptFile" = '-' ]; then
			if [ $stdinAlreadyUsed -eq 1 ]; then
				vsh_message WARN "stdin used more than once, skipping"
				continue
			fi
			scriptFile=/dev/stdin
			stdinAlreadyUsed=1
		elif [ ! -r "$scriptFile" ]; then
			vsh_message WARN "script file $scriptFile is not readable or does not exist, skipping"
			continue
		fi
		
		(
			declare -a downloads=()
			declare -A api_downloadsCache
			local -i downloadNumber=0
			
			source "$scriptFile"
		)
	done
}
main_functions+=(main_executeCommands)

function main_executeMainFunctions()
{
	local main_function
	for main_function in "${main_functions[@]}"
	do
		vsh_message INFO "${main_function}"
		$main_function
	done
}
