api_session_loggedOut=0
function api_session_logout()
{
	if [ $api_session_loggedOut -eq 1 ]; then
		return 0
	fi
	api_session_loggedOut=1
	
	# don't logout if curl was the cause of the error (eg because a retry timed out)
	if [ $curl_lastExitCode -ne 0 ]; then
		return 0
	fi
	
	local curl_downloadFilePath
	api_format=none defaults_format_headings=no-heading curl_wrapperLoggedInAbsoluteApiCall 204 DELETE "$api_session_logoutAbsoluteUrl"
}

api_session_token=""
api_session_logoutAbsoluteUrl=""
function api_session_sessions()
{
	declare -A curl_requestHeaders=()
	declare -A curl_responseHeaders=()
	local -i curl_httpResponseCode
	local curl_downloadFilePath
	
	curl_wrapperSetAcceptHeader
	local -r url="${api_map['/api/sessions']}"
	curl_post="" curl_wrapper POST "$url"
	
	curl_validateResponseCode 200 "Could not connect to $url"
	
	if [ $curl_httpResponseCode -ne 200 ]; then
		vsh_message FAIL "Could not log in to $vsh_baseUrl (HTTP Response Code was $curl_httpResponseCode)"
	fi
	
	function api_session_populateApiMap()
	{
		temporaryFiles_newFileToRemoveOnExit
		local -r tsvLinksFile="$TMP_FILE"
		defaults_format_headings=no-heading defaults_format_separator=$'\x01' xml_starlet_tsv_links_relName '/_:Session/_:Link' >"$tsvLinksFile"
	
		local href mimeType rel name
		local apiKey
		while IFS=$'\x01' read -r href mimeType rel name
		do
			# Probably the 'remove' link
			if [ -z "$mimeType" ]; then
				apiKey=/api/session/
			else
				case "$mimeType" in
			
					application/vnd.vmware.vcloud.orgList+xml)
						apiKey=/api/org/
					;;
				
					application/vnd.vmware.admin.vcloud+xml)
						apiKey=/api/admin/
					;;
				
					application/vnd.vmware.vcloud.query.queryList+xml)
						apiKey=/api/query
					;;
				
					application/vnd.vmware.vcloud.entity+xml)
						apiKey=/api/entity/
					;;
				
					application/vnd.vmware.vcloud.apiextensibility+xml)
						apiKey=/api/extensibility
					;;
				
					*)
						continue
					;;
				
				esac
			fi
		
			api_map["$apiKey"]="$href"
		
		done <"$tsvLinksFile"
	}
	
	api_session_populateApiMap
	api_session_token="${curl_responseHeaders['x-vcloud-authorization']}"
	api_session_logoutAbsoluteUrl="${api_map['/api/session/']}"
	downloadSessions="$curl_downloadFilePath"
}

function api_session_versions()
{
	local -r escapedRelativePathIncludingAnyLeadingAndTrailingSlashes=
	local -r absoluteUrl="${vsh_baseUrl}"/api/versions
	
	declare -A curl_requestHeaders=()
	declare -A curl_responseHeaders=()
	local -i curl_httpResponseCode
	local curl_downloadFilePath
	
	curl_wrapper GET "$absoluteUrl"
	
	curl_validateResponseCode 200 "Could not connect to $url"
	
	temporaryFiles_newFileToRemoveOnExit
	local -r tsvFilePath="$TMP_FILE"
	api_format=versions defaults_format_headings=no-heading defaults_format_separator=$'\x01' api_format_version >"$tsvFilePath"
	
	local -r sessionsUrl="$(awk -F $'\x01' '$1 ~ /'${defaults_api_version}'/ {print $2}' "$tsvFilePath")"
	if [ -z "$sessionsUrl" ]; then
		vsh_message FAIL "API version (defaults_api_version) $defaults_api_version is not supported"
	fi
	
	api_map['/api/sessions']="$sessionsUrl"
	api_map['/api/versions']="$absoluteUrl"
	# found from /api/admin/<uuid>, not in the map from /api/sessions
	api_map['/api/supportedSystemsInfo/']="${vsh_baseUrl}/api/supportedSystemsInfo/"
	
	downloadVersions="$curl_downloadFilePath"
}
