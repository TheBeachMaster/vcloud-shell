# relies on an associative array (api_upload_fileNameMap) having been created to cope with mapping vCloud's busted file names to our file names
function api_upload_createTemplateAndUploadFiles()
{
	local -r parentOfFilesFolderPath="$1"
	local -r uploadUrl="$2"
	local -r getUploadTemplateCallback="$3"
	local -r rootXmlElement="$4"
	local -r templateMimeType="$5"
	local -r xmlFilePath="$6"
	
	api_upload_createUploadTemplate "$uploadUrl" "$getUploadTemplateCallback" "$rootXmlElement" "$templateMimeType" "$xmlFilePath"
	
	pushd "$parentOfFilesFolderPath" 1>/dev/null 2>/dev/null
		
		while api_upload_checkTaskStatus
		do
			# done this way to avoid a subshell that hides errors
			local -i missingFilesElement=0
			api_upload_uploadFiles "$getUploadTemplateCallback" "$rootXmlElement"
			if [ $missingFilesElement -eq 1 ]; then
				return 0
			fi
			api_upload_sleep
			api_upload_getUploadTemplate
		done
		
	popd 1>/dev/null 2>/dev/null
}

function api_upload_checkTaskStatus()
{
	local taskStatus="$(defaults_format_headings=no-heading defaults_format_separator=$'\x01' xml_starlet_tsv_downloadFilePath "/_:${rootXmlElement}" '_:Tasks/_:Task/@status')"
	
	if [ -z "$taskStatus" ]; then
		return 1
	fi
	
	if [ "$taskStatus" = "running" ]; then
		return 0
	fi
	
	if [ "$taskStatus" = "error" ]; then
		local -r minorErrorCode="$(defaults_format_headings=no-heading defaults_format_separator=$'\x01' xml_starlet_tsv_downloadFilePath "/_:${rootXmlElement}" '_:Tasks/_:Task/_:Error/@minorErrorCode')"
		local -r details="$(defaults_format_headings=no-heading defaults_format_separator=$'\x01' xml_starlet_tsv_downloadFilePath "/_:${rootXmlElement}" '_:Tasks/_:Task/_:Details')"
		vsh_message FAIL "Upload error ($minorErrorCode:$details)"
	else
		cat "$curl_downloadFilePath" 1>&2
		vsh_message FAIL "Unexpected task status code ($taskStatus) (empty means no task) for upload"
	fi
}

function api_upload_sleep()
{
	vsh_message INFO "Polling after 2 seconds"
	sleep 2
}

function api_upload_createUploadTemplate()
{
	local -r uploadUrl="$1"
	local -r getUploadTemplateCallback="$2"
	local -r rootXmlElement="$3"
	local -r templateMimeType="$4"
	local -r xmlFilePath="$5"
	
	local -i curl_httpResponseCode
	curl_post="@${xmlFilePath}" curl_wrapperLoggedInAbsoluteApiCall_withoutResponseValidation POST "$uploadUrl" "Content-Type" "$templateMimeType"
	
	# We get a 400 if already created!
	case $curl_httpResponseCode in
		
		201)
			:
		;;
		
		400)
			local -r minorErrorCode="$(defaults_format_headings=no-heading defaults_format_separator='' xml_starlet_tsv "$curl_downloadFilePath" '/_:Error' '@minorErrorCode')"
			if [ "$minorErrorCode" != "DUPLICATE_NAME" ]; then
				curl_parseError
				vsh_message FAIL "$minorErrorCode (HTTP Response Code was $curl_httpResponseCode)"
			fi
			api_upload_getUploadTemplate
		;;
		
		# 415 for a DiskCreate...
		
		*)
			curl_validateResponseCode $curl_httpResponseCode "Unexpected HTTP response code $curl_httpResponseCode"
		;;
		
	esac
}

function api_upload_getUploadTemplate()
{
	${getUploadTemplateCallback}
	curl_downloadFilePath="${downloads[$downloadNumber]}"
}

function api_upload_uploadFiles()
{
	local -r getUploadTemplateCallback="$1"
	local -r rootXmlElement="$2"
	
	temporaryFiles_newFileToRemoveOnExit
	local -r filesFilePath="$TMP_FILE"
	
	# Files element may be missing entirely...
	local hasFilesElement="$(defaults_format_headings=no-heading defaults_format_separator=$'\x01' xml_starlet_tsv_downloadFilePath "/_:${rootXmlElement}" "_:Files/_:File/_:Link/@rel" | head -n 1)"
	if [ -z "$hasFilesElement" ]; then
		missingFilesElement=1
		return
	fi
	
	defaults_format_headings=no-heading defaults_format_separator=$'\x01' xml_starlet_tsv_downloadFilePath "/_:${rootXmlElement}/_:Files/_:File" '_:Link/@rel' '_:Link/@href' '@size' '@bytesTransferred' '@name' >"$filesFilePath"
	
	local -i filesOutstanding=0
	local -i ourFileSizeLocally
	local contentType
	local actualName
	local rel href size bytesTransferred name
	while IFS=$'\x01' read -r rel href size bytesTransferred name
	do
		if [ "$rel" != "upload:default" ]; then
			continue
		fi
		
		actualName="${api_upload_fileNameMap["$name"]}"
		
		if [ ! -f "$actualName" ]; then
			vsh_message FAIL "Missing required file $actualName to upload $name"
		fi
		
		ourFileSizeLocally=$(stat --dereference --printf='%s' "$actualName")
		
		if [ $bytesTransferred -gt $ourFileSizeLocally ]; then
			vsh_message FAIL "Mismatched sizes for $name (bytesTransferred)"
		fi
		
		# This is possible after descriptor.ovf is uploaded BUT before it has been 'processed' by the task...
		
		if [ "$size" = "$bytesTransferred" ]; then
			continue
		else
			filesOutstanding=$((filesOutstanding+1))
		fi
		
		if [ "$name" = "descriptor.ovf" ]; then
			contentType="text/xml"
		else
			contentType="application/octet-stream"
		fi
		
		if [ "$size" = "-1" ]; then
			curl_put="$actualName" curl_actualDownloadPath="/dev/null" curl_wrapperLoggedInAbsoluteApiCall 200 PUT "$href" "Content-Type" "$contentType" "Content-Length" $ourFileSizeLocally
		else
			if [ $size -ne $ourFileSizeLocally ]; then
				vsh_message FAIL "Mismatched sizes for $name (size) $size $ourFileSizeLocally"
			fi
			if [ $bytesTransferred -eq 0 ]; then
				curl_put="$actualName" curl_actualDownloadPath="/dev/null" curl_wrapperLoggedInAbsoluteApiCall 200 PUT "$href" "Content-Type" "$contentType" "Content-Length" $ourFileSizeLocally
			else
				curl_put="$actualName" curl_put_continueAt=$bytesTransferred curl_actualDownloadPath="/dev/null" curl_wrapperLoggedInAbsoluteApiCall 200 PUT "$href" "Content-Type" "$contentType" "Content-Length" $((size-bytesTransferred))
			fi
		fi
		
		# we could decrement filesOutstanding, but we can't really be sure, especially with the way descriptor.ovf upload then changes the required files!
		
		# should we break after file is completely uploaded, so we can retrieve the template again and check the task status?
		# break
		
	done <"$filesFilePath"
}