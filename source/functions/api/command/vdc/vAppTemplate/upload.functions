function api_command_vdc_vAppTemplate_upload()
{
	if [ $# -ne 4 ]; then
		informationMessage FAIL "api $api_format ${FUNCNAME[0]:12} requires <orgName> <vdcName> <vAppTemplateName> <parentFolderPath>"
	fi
	
	local -r orgName="$1"
	local -r vdcName="$2"
	local -r vAppTemplateName="$3"
	local -r parentFolderPath="$4"
	
	local -r ovfFolderPath="$parentFolderPath"/"$vAppTemplateName"
	mkdir -m 0755 -p "$ovfFolderPath"
	
	local curl_downloadFilePath
	
	local uploadUrl
	function api_callback_fromName_api_command_vdc_vAppTemplateUpload()
	{
		api_callback_fromName "$@"
		uploadUrl="${foundHref}"/action/uploadVAppTemplate
	}
	local curl_downloadFilePath
	api_call_get links-vdcs api_callback_fromName_api_command_vdc_vAppTemplateUpload api_callback_test_fromName vdc "$vdcName" '' \
		api_command_admin "$orgName"
	
	temporaryFiles_newFileToRemoveOnExit
	local -r postFile="$TMP_FILE"
	printf '%s' "<?xml version='1.0' encoding='UTF-8'?><UploadVAppTemplateParams name='${vAppTemplateName}' xmlns='http://www.vmware.com/vcloud/v1.5' xmlns:ovf='http://schemas.dmtf.org/ovf/envelope/1'><Description>${vAppTemplateName}</Description></UploadVAppTemplateParams>" >"$postFile"
	
	# We get a 400 if already created!
	local -i curl_httpResponseCode
	curl_post="@${postFile}" curl_wrapperLoggedInAbsoluteApiCall_withoutResponseValidation POST "$uploadUrl" "Content-Type" "application/vnd.vmware.vcloud.uploadVAppTemplateParams+xml"
	
	case $curl_httpResponseCode in
		
		201)
			#â‚¬ hideous
			sleep 30
		;;
		
		400)
			local -r minorErrorCode="$(defaults_format_headings=no-heading defaults_format_separator='' xml_starlet_tsv "$curl_downloadFilePath" '/_:Error' '@minorErrorCode')"
			if [ "$minorErrorCode" != "DUPLICATE_NAME" ]; then
				curl_validateResponseCode "Unexpected HTTP 400 response for ${FUNCNAME[0]:12}"
			fi
			api_command_vdc_vAppTemplate_upload_getVAppTemplate
		;;
		
		*)
			curl_validateResponseCode "Unexpected HTTP response code $curl_httpResponseCode for ${FUNCNAME[0]:12}"
		;;
		
	esac
	
	pushd "$ovfFolderPath" 1>/dev/null 2>/dev/null
		
		local -i loopAgain
		api_command_vdc_vAppTemplate_upload_uploadFiles
		while [ $loopAgain -ne 0 ]
		do
			api_command_vdc_vAppTemplate_upload_getVAppTemplate
			api_command_vdc_vAppTemplate_upload_uploadFiles
		done
		
	popd 1>/dev/null 2>/dev/null
}

function api_command_vdc_vAppTemplate_upload_getVAppTemplate()
{
	api_format=none api_command_vdc_vAppTemplate "$orgName" "$vdcName" "$vAppTemplateName"
	curl_downloadFilePath="${downloads[$downloadNumber]}"
}

function api_command_vdc_vAppTemplate_upload_uploadFiles()
{
	set -x
	cat "$curl_downloadFilePath" 1>&2
	
	temporaryFiles_newFileToRemoveOnExit
	local -r filesToUploadPath="$TMP_FILE"
	defaults_format_headings=no-heading defaults_format_separator=$'\x01' xml_starlet_tsv_downloadFilePath '/_:VAppTemplate/_:Files/_:File/_:Link' '@rel' '@href' '../@size' '../@bytesTransferred' '../@name' >"$filesToUploadPath"
	
	loopAgain=0
	local -i ourFileSizeLocally
	local contentType
	local rel href size bytesTransferred name
	while IFS=$'\x01' read -r rel href size bytesTransferred name
	do
		if [ "$rel" != "upload:default" ]; then
			continue
		fi
		
		if [ ! -f "$name" ]; then
			informationMessage FAIL "Missing required file to upload $name"
		fi
		
		ourFileSizeLocally=$(stat --printf='%s' "$name")
		
		if [ $bytesTransferred -gt $ourFileSizeLocally ]; then
			informationMessage FAIL "Mismatched sizes for $name (bytesTransferred)"
		fi
		
		# This is possible after descriptor.ovf is uploaded BUT before it has been 'processed' by the task...
		if [ "$size" = "$bytesTransferred" ]; then
			continue
		fi
		
		if [ "$name" = "descriptor.ovf" ]; then
			contentType="text/xml"
		else
			contentType="application/octet-stream"
		fi
		
		# add content-length header?
		if [ "$size" = "-1" ]; then
			curl_put="$name" curl_actualDownloadPath="/dev/null" curl_wrapperLoggedInAbsoluteApiCall 200 PUT "$href" "Content-Type" "$contentType"
		else
			if [ $size -ne $ourFileSizeLocally ]; then
				informationMessage FAIL "Mismatched sizes for $name (size) $size $ourFileSizeLocally"
			fi
			if [ $bytesTransferred -eq 0 ]; then
				curl_put="$name" curl_actualDownloadPath="/dev/null" curl_wrapperLoggedInAbsoluteApiCall 200 PUT "$href" "Content-Type" "$contentType"
			else
				curl_put="$name" curl_put_continueAt=$bytesTransferred curl_actualDownloadPath="/dev/null" curl_wrapperLoggedInAbsoluteApiCall 200 PUT "$href" "Content-Type" "$contentType"
			fi
		fi
		loopAgain=1
		
	done <"$filesToUploadPath"
	
	set +x
}
