function api_command_vdc_disk_create()
{
	vsh_message INFO "api $api_format ${FUNCNAME[0]:12} $@"
	if [ $# -ne 4 ]; then
		vsh_message FAIL "api $api_format ${FUNCNAME[0]:12} requires <orgName> <vdcName> <diskName> <sizeInMegabytes>"
	fi
	
	local -r orgName="$1"
	local -r vdcName="$2"
	local -r diskName="$3"
	local -ir sizeInMegabytes=$4
	
	local curl_downloadFilePath
	local uploadUrl
	function api_callback_fromName_api_command_vdc_disk_create()
	{
		api_callback_fromName "$@"
		uploadUrl="${foundHref}"/disk
	}
	local curl_downloadFilePath
	
	api_call_get links-vdcs api_callback_fromName_api_command_vdc_disk_create api_callback_test_fromName vdc "$vdcName" '' \
		api_command_admin "$orgName"
	
	# Do a check FIRST to prevent idempotency fails
	
	
	temporaryFiles_newFileToRemoveOnExit
	local -r xmlFilePath="$TMP_FILE"
	
	cat >"$xmlFilePath" <<-EOF
		<?xml version="1.0" encoding="UTF-8"?>
		<DiskCreateParams xmlns="http://www.vmware.com/vcloud/v1.5">
			<Disk name="${diskName}" size="${sizeInMegabytes}">
				<Description>${diskName}</Description>
			</Disk>
		</DiskCreateParams>
	EOF
	api_upload_createUploadTemplate "$uploadUrl" api_command_vdc_disk_create_uploadTemplateCallback "Disk" "application/vnd.vmware.vcloud.diskCreateParams+xml" "$xmlFilePath"
	
	# Outputs a Disk type with Links, Desscription
	cat "$curl_downloadFilePath"
}

# In the vdc, in the resource entities, find the disk links
# <ResourceEntity type="application/vnd.vmware.vcloud.disk+xml" name="independent-disk1" href="https://api.vcd.portal.skyscapecloud.com/api/disk/229ce3bd-58c4-4f5c-b4db-36cd8baa7b39"/>
# <ResourceEntity type="application/vnd.vmware.vcloud.disk+xml" name="independent-disk1" href="https://api.vcd.portal.skyscapecloud.com/api/disk/27767df1-0ccd-4f92-817c-665e009535d0"/>


function api_command_vdc_disk_create_uploadTemplateCallback()
{
	vsh_message FAIL "Disk creation is not idempotent"
}