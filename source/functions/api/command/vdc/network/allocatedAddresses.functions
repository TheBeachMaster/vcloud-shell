function api_command_vdc_network_allocatedAddresses()
{
	vsh_message INFO "api $api_format ${FUNCNAME[0]:12} $@"
	if [ $# -ne 3 ]; then
		vsh_message FAIL "api $api_format ${FUNCNAME[0]:12} requires <orgName> <vdcName> <networkName>"
		return 1
	fi
	
	local -r orgName="$1"
	local -r vdcName="$2"
	local -r networkName="$3"
	
	local -r key="${FUNCNAME[0]:12}_${orgName}_${vdcName}_${networkName}"
	local -r value="${api_downloadsCache["${key}"]}"
	if [ -n "$value" ]; then
		local curl_downloadFilePath="$value"
	else
		local curl_downloadFilePath
		api_call_get links api_callback_fromMimeType api_callback_test_fromMimeType addresses "application/vnd.vmware.vcloud.allocatedNetworkAddress+xml" '' \
			api_command_vdc_network "$orgName" "$vdcName" "$networkName"
		api_call_cacheDownload
	fi
	
	api_call_recordDownload
	api_format_${FUNCNAME[0]:12}
}

function api_format_vdc_network_allocatedAddresses()
{
	local -r prefix="${FUNCNAME[0]:11}"
	case "$api_format" in
		
		none)
			:
		;;
		
		xml)
			cat "$curl_downloadFilePath"
		;;
		
		id-*)
			xml_starlet_keyValue ${api_format:3} "$prefix" "$curl_downloadFilePath" '/_:AllocatedIpAddresses' '@type' '@href'
		;;
		
		links)
			xml_starlet_tsv_links_relName '/_:AllocatedIpAddresses/_:Link'
		;;
		
		settings)
			xml_starlet_tsv_links_relName '/_:AllocatedIpAddresses/_:IpAddress/_:Link' '../_:IpAddress' '../@isDeployed' '../@allocationType'
		;;
		
		*)
			vsh_message FAIL "Please specify api_format as either xml, id-bash, id-tsv, links or settings, not $api_format"
			return 1
		;;
		
	esac
}
