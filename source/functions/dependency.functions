dependency_functions=()

function dependency_ensureWeAreRunningBash4()
{
	if [ ${BASH_VERSINFO[0]} != "4" ]; then
		exitError "$ourName: You are not running bash 4."
	fi
}
dependency_functions+=(dependency_ensureWeAreRunningBash4)

function dependency_determineDistribution()
{
	if which lsb_release 1>/dev/null 2>/dev/null; then
		readonly lsbDistributor="$(lsb_release --id --short)"
		if [ -n "$lsbDistributor" ]; then
			readonly pathName="$lsbDistributor"
			return 0
		fi
	fi
	if which brew 1>/dev/null 2>/dev/null; then
		readonly pathName="Homebrew"
		return 0
	fi
	if [ -f /etc/centos-release ]; then
		readonly pathName="CentOS"
		return 0
	fi
	if [ -f /etc/fedora-release ]; then
		readonly pathName="Fedora"
		return 0
	fi
	if [ -f /etc/redhat-release ]; then
		readonly pathName="RedHat"
		return 0
	fi
	informationMessage FAIL "Could not determine distribution"
	exit 1
}
dependency_functions+=(dependency_determineDistribution)

function dependency_verifyHostSystemRequirementsUsingDependencyChecks()
{
	declare -a dependencies=()
	
	readonly pathNames="$pathsPath"/"$pathName"
	if [ ! -d "$pathNames" ]; then
		exitError "path name $pathNames does not exist or is not a directory"
	fi
	
	# Installs the packageManager function
	readonly pathNamesFunction="$pathNames"/package-manager.functions
	if [ ! -f "$pathNamesFunction" ]; then
		exitError "path name functions $pathNamesFunction does not exist or is not a directory"
	fi
	source "$pathNamesFunction"
	
	declare -a installPackages=()
	local packagePath
	local packageName
	local symlink
	local ourPath=""
	for packagePath in "$pathNames"/*
	do
		if [ ! -d "$packagePath" ]; then
			continue
		fi
		if [ -z "$ourPath" ]; then
			ourPath="$packagePath"
		else
			ourPath="$ourPath":"$packagePath"
		fi
		packageName="$(purebash_basename "$packagePath")"
		
		# Do not check dependencies that are already installed
		if [ "$packageName" = "zzz-built-in" ]; then
			continue
		fi
		
		for symlink in "$packagePath"/*
		do
			if [ -L "$symlink" ]; then
				# Not perfect; might point to non-exec but extant file
				if [ ! -x "$symlink" ]; then
					installPackages+=("$packageName")
					informationMessage INFO "Uninstalled binary $symlink"
					informationMessage WARN "Uninstalled package $packageName"
					break
				fi
			fi
		done
	done
	
	if [ ${#installPackages[@]} -ne 0 ]; then
		informationMessage TASK "Installing missing packages"
		if [ "$verbose" = "yes" ]; then
			packageManager "${installPackages[@]}"
		else
			packageManager "${installPackages[@]}" 1>/dev/null
		fi
		informationMessage PASS "Installing missing packages"
	fi
	
	export PATH="$ourPath"
}
dependency_functions+=(dependency_verifyHostSystemRequirementsUsingDependencyChecks)

function dependency_installDependencies()
{
	local dependency_function
	for dependency_function in "${dependency_functions[@]}"
	do
		$dependency_function
	done
}

function dependency_isMacOSX()
{
	if [ "$(uname)" = "Darwin" ]; then
		return 0
	fi
	return 1
}
