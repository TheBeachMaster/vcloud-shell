dependency_functions=()

dependency_checkFunctions=()

function dependency_ensureWeAreRunningBash4()
{
	if [ ${BASH_VERSINFO[0]} != "4" ]; then
		exitError "$ourName: You are not running bash 4."
	fi
}
dependency_functions+=(dependency_ensureWeAreRunningBash4)

function dependency_determineDistributionName()
{
	local dependency_checkFunction
	for dependency_checkFunction in "${dependency_checkFunctions[@]}"
	do
		if $dependency_checkFunction; then
			return 0
		fi
	done
	
	if which lsb_release 1>/dev/null 2>/dev/null; then
		local -r lsbDistributor="$(lsb_release --id --short)"
		if [ -n "$lsbDistributor" ]; then
			readonly distributionName="$lsbDistributor"
			return 0
		fi
	fi
	
	informationMessage FAIL "Could not determine distribution"
	exit 1
}
dependency_functions+=(dependency_determineDistributionName)


function dependency_setUpAliases()
{
	local -r pathsFile="$switch_configPath"/paths.d/"$distributionName".path
	if [ ! -f "$pathsFile" ]; then
		return 0
	fi
	
	# changing PATH clears the hash table - remember!
	# enable hashing
	set -h
	
	declare -A unaliasedBinaries
	declare -A installPackages
	local packageName
	local binaryName
	local absolutePath
	while IFS=' ' read -r -d $'\n' packageName binaryName absolutePath
	do
		if [ -x "$absolutePath" ]; then
			hash -p "$absolutePath" "$binaryName"
		else
			if [ "$packageName" = "zzz-built-in" ]; then
				informationMessage FAIL "Essential binary $binaryName not in expected path $absolutePath and no installation is possible"
			fi
			unaliasedBinaries["${binaryName}"]="$absolutePath"
			installPackages["${packageName}"]=1
		fi
	done <"$pathsFile"
	
	if [ ${#installPackages[@]} -ne 0 ]; then
		informationMessage WARN "Installing missing packages ${!installPackages[@]}"
		dependency_${distributionName}_packageManager "${!installPackages[@]}"
		for binaryName in "${!unaliasedBinaries[@]}"
		do
			absolutePath="${unaliasedBinaries["${binaryName}"]}"
			hash -p "$absolutePath" "$binaryName"
		done
	fi
	
}
dependency_functions+=(dependency_setUpAliases)

function dependency_installDependencies()
{
	local dependency_function
	for dependency_function in "${dependency_functions[@]}"
	do
		$dependency_function
	done
}
