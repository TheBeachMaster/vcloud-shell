function xml_starlet_tsv_links_relName()
{
	xml_starlet_tsv_downloadFilePath "$1" '@href' '@type' '@rel' '@name' "${@:2}"
}

function xml_starlet_tsv_links_name()
{
	xml_starlet_tsv_downloadFilePath "$1" '@href' '@type' '@name' "${@:2}"
}

function xml_starlet_tsv_links_rel()
{
	xml_starlet_tsv_downloadFilePath "$1" '@href' '@type' '@rel' "${@:2}"
}

function xml_starlet_tsv_links_relOnly
{
	xml_starlet_tsv_downloadFilePath "$1" '@href' '@rel' "${@:2}"
}

function xml_starlet_tsv_downloadFilePath()
{
	xml_starlet_tsv "$curl_downloadFilePath" "$@"
}

function xml_starlet_tsv()
{
	local -r filePath="$1"
	local -r xpathMatch="$2"
	shift 2
	
	declare -a outputArguments=()
	local attributeOrElement
	local -i afterFirst=0
	for attributeOrElement in "$@"
	do
		xml_starlet_convertXPath
		
		if [ $afterFirst -eq 1 ]; then
			if [ "$defaults_format_headings" = "with-heading" ]; then
				echo -n $'\t'
			fi
			outputArguments+=('--output' "$defaults_format_separator")
		else
			afterFirst=1
		fi
		if [ "$defaults_format_headings" = "with-heading" ]; then
			echo -n "$fieldName"
		fi
		
		# This design handles missing values
		outputArguments+=('--value-of' "$attributeOrElement")
		
		# concat(/Foo/Baz, substring('not-found', 1 div not(/Foo/Baz)))
	done
	
	if [ "$defaults_format_headings" = "with-heading" ]; then
		printf '\n'
	fi
	
	xml sel --text --template --match "$xpathMatch" "${outputArguments[@]}" --nl "$filePath"
}

readonly xml_starlet_quote="'"
function xml_starlet_keyValue()
{
	local -r variant="$1"
	local -r prefix="$2"
	local -r filePath="$3"
	local -r xpathMatch="$4"
	shift 4
	
	declare -a outputArguments=()
	local attributeOrElement
	local fieldName
	case "$variant" in
		
		bash)
			for attributeOrElement in "$@"
			do
				xml_starlet_convertXPath
				
				outputArguments+=('--output' "${prefix}_${fieldName}=${xml_starlet_quote}" '--value-of' "$attributeOrElement" --output "${xml_starlet_quote}" '--nl')
			done
		;;
		
		tsv)
			local -i afterFirst=0
			for attributeOrElement in "$@"
			do
				xml_starlet_convertXPath
				
				outputArguments+=('--output' "${prefix}_${fieldName}${defaults_format_separator}" '--value-of' "$attributeOrElement" '--nl')
			done
			
			if [ "$defaults_format_headings" = "with-heading" ]; then
				echo "Key${defaults_format_separator}Value"
			fi
		;;
		
	esac
	
	xml sel --text --template --match "$xpathMatch" "${outputArguments[@]}" "$filePath"
}

function xml_starlet_convertXPath()
{
	fieldName="$(sed 's,@,,g;s,\.\./,,g;s,_:,,g;s,/,_,g' <<<"$attributeOrElement")"
}
