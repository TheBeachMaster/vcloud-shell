function xml_starlet_extractTsv()
{
	local -r filePath="$1"
	local -r xpathMatch="$2"
	shift 2
	
	declare -a outputArguments=()
	local attributeOrElement
	local -i afterFirst=0
	for attributeOrElement in "$@"
	do
		xml_starlet_convertXPath
		
		if [ $afterFirst -eq 1 ]; then
			if [ $heading -eq 1 ]; then
				echo -n $'\t'
			fi
			outputArguments+=('--output' $'\t')
		else
			afterFirst=1
		fi
		if [ $heading -eq 1 ]; then
			echo -n "$fieldName"
		fi
		
		outputArguments+=('--value-of' "$attributeOrElement")
	done
	
	if [ $heading -eq 1 ]; then
		printf '\n'
	fi
	
	xml sel --text --template --match "$xpathMatch" "${outputArguments[@]}" --nl "$filePath"
}

readonly quote="'"
function xml_starlet_keyValueBash()
{
	local -r prefix="$1"
	local -r filePath="$2"
	local -r xpathMatch="$3"
	shift 3
	
	declare -a outputArguments=()
	local attributeOrElement
	local fieldName
	
	for attributeOrElement in "$@"
	do
		xml_starlet_convertXPath
		
		outputArguments+=('--output' "${prefix}_${fieldName}=${quote}" '--value-of' "$attributeOrElement" --output "${quote}" '--nl')
	done
	
	xml sel --text --template --match "$xpathMatch" "${outputArguments[@]}" "$filePath"
}

function xml_starlet_keyValueTsv()
{
	local -r prefix="$1"
	local -r filePath="$2"
	local -r xpathMatch="$3"
	shift 3

	declare -a outputArguments=()
	local attributeOrElement
	local fieldName
	local -i afterFirst=0
	for attributeOrElement in "$@"
	do
		xml_starlet_convertXPath
		
		outputArguments+=('--output' "${prefix}_${fieldName}${tab}" '--value-of' "$attributeOrElement" '--nl')
	done
	
	if [ $heading -eq 1 ]; then
		echo "Key${tab}Value"
	fi
	
	xml sel --text --template --match "$xpathMatch" "${outputArguments[@]}" "$filePath"
}

readonly xml_starlet_slash='/'
function xml_starlet_convertXPath()
{
	# remove @
	fieldName="${attributeOrElement//@/}"
	
	# remove ../
	fieldName="${attributeOrElement//..${xml_starlet_slash}/}"
	
	# remove _:
	fieldName="${fieldName//_:/}"
	
	# remove /
	fieldName="${fieldName//${xml_starlet_slash}/_}"
}
