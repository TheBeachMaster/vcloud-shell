function api_supportedSystemsInfo()
{
	if [ $# -ne 0 ]; then
		exitError "command supportedSystemsInfo takes no <args>"
	fi
	
	local curl_downloadFilePath
	curl_wrapperLoggedInRelativeApiCall GET /api/supportedSystemsInfo/
	
	local -r prefix="api_supportedSystemsInfo"
	case "$format" in
		
		xml)
			cat "$curl_downloadFilePath"
		;;
		
		id-bash)
			xml_starlet_keyValueBash "$prefix" "$curl_downloadFilePath" '/_:SupportedOperatingSystemsInfo' '@href' '@type'
		;;
		
		id-tsv)
			xml_starlet_keyValueTsv "$prefix" "$curl_downloadFilePath" '/_:SupportedOperatingSystemsInfo' '@href' '@type'
		;;
		
		tsv)
			xml_starlet_extractTsv "$curl_downloadFilePath" '/_:SupportedOperatingSystemsInfo/_:OperatingSystemFamilyInfo/_:OperatingSystem' \
				'../_:Name' '../_:OperatingSystemFamilyId' \
				'_:OperatingSystemId' '_:DefaultHardDiskAdapterType' '_:MinimumHardDiskSizeGigabytes' '_:MinimumMemoryMegabytes' '_:Name' '_:InternalName' '_:Supported' '_:x64' '_:MaximumCpuCount' '_:MinimumHardwareVersion' '_:PersonalizationEnabled' '_:PersonalizationAuto' '_:SysprepPackagingSupported' '_:SupportsMemHotAdd' '_:cimOsId' '_:CimVersion' '_:SupportedForCreate'
		;;
		
		*)
			exitError "Please specify format as either xml or links, not $format"
		;;
		
	esac
}

function api_admin()
{
	if [ $# -ne 1 ]; then
		exitError "command admin takes <name>"
	fi
	
	local -r orgName="$1"
	
	temporaryFiles_newFileToRemoveOnExit
	local -r orgsTsvFile="$TMP_FILE"
	format=links heading=0 api_admins >"$orgsTsvFile"
	
	local foundHref=""
	local href mimeType name
	while IFS=$'\t' read -r -d $'\n' href mimeType name
	do
		if [ "$name" = "$orgName" ]; then
			foundHref="$href"
			break
		fi
	done <"$orgsTsvFile"
	
	if [ -z "$foundHref" ]; then
		informationMessage FAIL "Could not find org $orgName"
		exitError 1
	fi
	
	local curl_downloadFilePath
	curl_wrapperLoggedInAbsoluteApiCall GET "$foundHref"
	
	local -r prefix="Prefix"
	case "$format" in
		
		xml)
			cat "$curl_downloadFilePath"
		;;
		
		links)
			# Not every settings entry has a Link
			xml_starlet_extractTsv "$curl_downloadFilePath" '/_:AdminOrg/_:Link' '@href' '@type' '@rel'
			xml_starlet_extractTsv "$curl_downloadFilePath" '/_:AdminOrg/_:Settings/_:Link' '@href' '@type' '@rel'
			xml_starlet_extractTsv "$curl_downloadFilePath" '/_:AdminOrg/_:Settings/_:OrgGeneralSettings/_:Link' '@href' '@type' '@rel'
			xml_starlet_extractTsv "$curl_downloadFilePath" '/_:AdminOrg/_:Settings/_:VAppLeaseSettings/_:Link' '@href' '@type' '@rel'
			xml_starlet_extractTsv "$curl_downloadFilePath" '/_:AdminOrg/_:Settings/_:VAppTemplateLeaseSettings/_:Link' '@href' '@type' '@rel'
			xml_starlet_extractTsv "$curl_downloadFilePath" '/_:AdminOrg/_:Settings/_:OrgEmailSettings/_:Link' '@href' '@type' '@rel'
			xml_starlet_extractTsv "$curl_downloadFilePath" '/_:AdminOrg/_:Settings/_:OrgPasswordPolicySettings/_:Link' '@href' '@type' '@rel'
			xml_starlet_extractTsv "$curl_downloadFilePath" '/_:AdminOrg/_:Settings/_:OrgOperationLimitsSettings/_:Link' '@href' '@type' '@rel'
		;;
		
		id-bash)
			xml_starlet_keyValueBash "$prefix" "$curl_downloadFilePath" '/_:AdminOrg' '@href' '@type' '@name' '_:FullName' '_:Description' '_:IsEnabled'
		;;
		
		id-tsv)
			xml_starlet_keyValueTsv "$prefix" "$curl_downloadFilePath" '/_:AdminOrg' '@href' '@type' '@name' '_:FullName' '_:Description' '_:IsEnabled'
		;;
		
		settings-bash)
			xml_starlet_keyValueBash "$prefix" "$curl_downloadFilePath" '/_:AdminOrg/_:Settings' \
				'_:VAppLeaseSettings/_:DeleteOnStorageLeaseExpiration' '_:VAppLeaseSettings/_:StorageLeaseSeconds' '_:VAppLeaseSettings/_:DeploymentLeaseSeconds' \
				'_:VAppTemplateLeaseSettings/_:DeleteOnStorageLeaseExpiration' '_:VAppTemplateLeaseSettings/_:StorageLeaseSeconds' \
				'_:OrgGeneralSettings/_:CanPublishCatalogs' '_:OrgGeneralSettings/_:CanPublishExternally' '_:OrgGeneralSettings/_:CanSubscribe' '_:OrgGeneralSettings/_:DeployedVMQuota' '_:OrgGeneralSettings/_:StoredVmQuota' '_:OrgGeneralSettings/_:UseServerBootSequence' '_:OrgGeneralSettings/_:DelayAfterPowerOnSeconds' \
				'_:OrgLdapSettings/_:OrgLdapMode' '_:OrgLdapSettings/_:CustomUsersOu' \
				'_:OrgEmailSettings/_:IsDefaultSmtpServer' '_:OrgEmailSettings/_:IsDefaultOrgEmail' '_:OrgEmailSettings/_:FromEmailAddress' '_:OrgEmailSettings/_:DefaultSubjectPrefix' '_:OrgEmailSettings/_:IsAlertEmailToAllAdmins' '_:OrgEmailSettings/_:SmtpServerSettings/_:IsUseAuthentication' '_:OrgEmailSettings/_:SmtpServerSettings/_:Host' '_:OrgEmailSettings/_:SmtpServerSettings/_:Port' '_:OrgEmailSettings/_:SmtpServerSettings/_:Username' \
				'_:OrgPasswordPolicySettings/_:AccountLockoutEnabled' '_:OrgPasswordPolicySettings/_:InvalidLoginsBeforeLockout' '_:OrgPasswordPolicySettings/_:AccountLockoutIntervalMinutes' \
				'_:OrgOperationLimitsSettings/_:ConsolesPerVmLimit' '_:OrgOperationLimitsSettings/_:OperationsPerUser' '_:OrgOperationLimitsSettings/_:OperationsPerOrg' \
				'_:OrgFederationSettings/_:Enabled'
		;;
		
		settings-tsv)
			xml_starlet_keyValueTsv "$prefix" "$curl_downloadFilePath" '/_:AdminOrg/_:Settings' \
				'_:VAppLeaseSettings/_:DeleteOnStorageLeaseExpiration' '_:VAppLeaseSettings/_:StorageLeaseSeconds' '_:VAppLeaseSettings/_:DeploymentLeaseSeconds' \
				'_:VAppTemplateLeaseSettings/_:DeleteOnStorageLeaseExpiration' '_:VAppTemplateLeaseSettings/_:StorageLeaseSeconds' \
				'_:OrgGeneralSettings/_:CanPublishCatalogs' '_:OrgGeneralSettings/_:CanPublishExternally' '_:OrgGeneralSettings/_:CanSubscribe' '_:OrgGeneralSettings/_:DeployedVMQuota' '_:OrgGeneralSettings/_:StoredVmQuota' '_:OrgGeneralSettings/_:UseServerBootSequence' '_:OrgGeneralSettings/_:DelayAfterPowerOnSeconds' \
				'_:OrgLdapSettings/_:OrgLdapMode' '_:OrgLdapSettings/_:CustomUsersOu' \
				'_:OrgEmailSettings/_:IsDefaultSmtpServer' '_:OrgEmailSettings/_:IsDefaultOrgEmail' '_:OrgEmailSettings/_:FromEmailAddress' '_:OrgEmailSettings/_:DefaultSubjectPrefix' '_:OrgEmailSettings/_:IsAlertEmailToAllAdmins' '_:OrgEmailSettings/_:SmtpServerSettings/_:IsUseAuthentication' '_:OrgEmailSettings/_:SmtpServerSettings/_:Host' '_:OrgEmailSettings/_:SmtpServerSettings/_:Port' '_:OrgEmailSettings/_:SmtpServerSettings/_:Username' \
				'_:OrgPasswordPolicySettings/_:AccountLockoutEnabled' '_:OrgPasswordPolicySettings/_:InvalidLoginsBeforeLockout' '_:OrgPasswordPolicySettings/_:AccountLockoutIntervalMinutes' \
				'_:OrgOperationLimitsSettings/_:ConsolesPerVmLimit' '_:OrgOperationLimitsSettings/_:OperationsPerUser' '_:OrgOperationLimitsSettings/_:OperationsPerOrg' \
				'_:OrgFederationSettings/_:Enabled'
		;;
		
		users)
			xml_starlet_extractTsv "$curl_downloadFilePath" '/_:AdminOrg/_:Users/_:UserReference' '@href' '@type' '@name'
		;;
		
		groups)
			xml_starlet_extractTsv "$curl_downloadFilePath" '/_:AdminOrg/_:Groups/_:GroupReference' '@href' '@type' '@name'
		;;
		
		catalogs)
			xml_starlet_extractTsv "$curl_downloadFilePath" '/_:AdminOrg/_:Catalogs/_:CatalogReference' '@href' '@type' '@name'
		;;
		
		vdcs)
			xml_starlet_extractTsv "$curl_downloadFilePath" '/_:AdminOrg/_:Vdcs/_:Vdc' '@href' '@type' '@name'
		;;
		
		networks)
			xml_starlet_extractTsv "$curl_downloadFilePath" '/_:AdminOrg/_:Networks/_:Network' '@href' '@type' '@name'
		;;
		
		*)
			exitError "Please specify format as either xml, links, id-bash, id-tsv, settings-bash, settings-tsv, users, groups, catalogs, vdcs or networks, not $format"
		;;
		
	esac
}

function api_admins()
{
	if [ $# -ne 0 ]; then
		exitError "command admins takes no <args>"
	fi
	
	local curl_downloadFilePath
	curl_wrapperLoggedInRelativeApiCall GET /api/admin/
	
	local -r prefix="admins"
	case "$format" in
		
		xml)
			cat "$curl_downloadFilePath"
		;;
		
		links)
			xml_starlet_extractTsv "$curl_downloadFilePath" '/_:VCloud/_:OrganizationReferences/_:OrganizationReference' '@href' '@type' '@name'
		;;
		
		id-bash)
			xml_starlet_keyValueBash "$prefix" "$curl_downloadFilePath" '/_:VCloud' '@href' '@type' '@name' '_:Description'
		;;
		
		id-tsv)
			xml_starlet_keyValueTsv "$prefix" "$curl_downloadFilePath" '/_:VCloud' '@href' '@type' '@name' '_:Description'
		;;
		
		*)
			exitError "Please specify format as either xml, links, id-bash or id-tsv, not $format"
		;;
		
	esac
}

function api_org()
{
	if [ $# -ne 1 ]; then
		exitError "command org requires <name>"
	fi
	local -r orgName="$1"
	
	temporaryFiles_newFileToRemoveOnExit
	local -r orgsTsvFile="$TMP_FILE"
	format=links heading=0 api_orgs >"$orgsTsvFile"
	
	local foundHref=""
	local href mimeType name
	while IFS=$'\t' read -r -d $'\n' href mimeType name
	do
		if [ "$name" = "$orgName" ]; then
			foundHref="$href"
			break
		fi
	done <"$orgsTsvFile"
	
	if [ -z "$foundHref" ]; then
		informationMessage FAIL "Could not find org $orgName"
		exitError 1
	fi
	
	local curl_downloadFilePath
	curl_wrapperLoggedInAbsoluteApiCall GET "$foundHref"
	
	local -r prefix="org"
	case "$format" in
		
		xml)
			cat "$curl_downloadFilePath"
		;;
		
		links)
			xml_starlet_extractTsv "$curl_downloadFilePath" '/_:Org/_:Link' '@rel' '@href' '@type' '@name'
		;;
		
		id-bash)
			xml_starlet_keyValueBash "$prefix" "$curl_downloadFilePath" '/_:Org' '@id' '_:FullName' '_:Description'
		;;
		
		id-tsv)
			xml_starlet_keyValueTsv "$prefix" "$curl_downloadFilePath" '/_:Org' '@id' '_:FullName' '_:Description'
		;;
		
		*)
			exitError "Please specify format as either xml, links, or id, not $format"
		;;
		
	esac
}

function api_orgs()
{
	if [ $# -ne 0 ]; then
		exitError "command orgs takes no <args>"
	fi
	
	local curl_downloadFilePath
	curl_wrapperLoggedInRelativeApiCall GET /api/org/
	
	local -r prefix="orgs"
	case "$format" in
		
		xml)
			cat "$curl_downloadFilePath"
		;;
		
		links)
			xml_starlet_extractTsv "$curl_downloadFilePath" '/_:OrgList/_:Org' '@href' '@type' '@name'
		;;
		
		id-bash)
			xml_starlet_keyValueBash "$prefix" "$curl_downloadFilePath" '/_:OrgList' '@type' '@href'
		;;
		
		id-tsv)
			xml_starlet_keyValueTsv "$prefix" "$curl_downloadFilePath" '/_:OrgList' '@type' '@href'
		;;
		
		*)
			exitError "Please specify format as either xml or links, not $format"
		;;
		
	esac
}

function api_session()
{
	if [ $# -ne 0 ]; then
		exitError "command session takes no <args>"
	fi

	local curl_downloadFilePath
	curl_wrapperLoggedInRelativeApiCall GET /api/session/
	
	local -r prefix="session"
	case "$format" in
		
		xml)
			cat "$curl_downloadFilePath"
		;;
		
		links)
			xml_starlet_extractTsv "$curl_downloadFilePath" '/_:Session/_:Link' '@href' '@type' '@name'
		;;
		
		id-bash)
			xml_starlet_keyValueBash "$prefix" "$curl_downloadFilePath" '/_:Session' '@href' '@type' '@userId' '@user' '@org'
		;;
		
		id-tsv)
			xml_starlet_keyValueTsv "$prefix" "$curl_downloadFilePath" '/_:Session' '@href' '@type' '@userId' '@user' '@org'
		;;
		
		*)
			exitError "Please specify format as either xml, links or id, not $format"
		;;
		
	esac
}

api_token=""
function api_sessions()
{
	declare -A curl_requestHeaders=()
	declare -A curl_responseHeaders=()
	local -i curl_httpResponseCode
	local curl_downloadFilePath
	
	curl_wrapperSetAcceptHeader
	curl_wrapper POST "${api_map['/api/sessions']}"
	if [ $curl_httpResponseCode -ne 200 ]; then
		informationMessage FAIL "Could not log in to $configuration_api_baseUrl (HTTP Response Code was $curl_httpResponseCode)"
		exit 1
	fi
	
	api_token="${curl_responseHeaders['x-vcloud-authorization']}"
	
	#down	application/vnd.vmware.vcloud.orgList+xml	https://api.vcd.portal.skyscapecloud.com/api/org/	
	#remove		https://api.vcd.portal.skyscapecloud.com/api/session/	
	#down	application/vnd.vmware.admin.vcloud+xml	https://api.vcd.portal.skyscapecloud.com/api/admin/	
	#down	application/vnd.vmware.vcloud.org+xml	https://api.vcd.portal.skyscapecloud.com/api/org/3a2900f9-f15c-49d6-8771-bdd8bbebe456	98-184-1-151d73
	#down	application/vnd.vmware.vcloud.query.queryList+xml	https://api.vcd.portal.skyscapecloud.com/api/query	
	#entityResolver	application/vnd.vmware.vcloud.entity+xml	https://api.vcd.portal.skyscapecloud.com/api/entity/	
	#down:extensibility	application/vnd.vmware.vcloud.apiextensibility+xml	https://api.vcd.portal.skyscapecloud.com/api/extensibility
	local relation
	local href
	local mimeType
	local name
	local apiKey
	# bash seems to be compressing empty fields
	while IFS=$'\t' read -r -d $'\n' relation href mimeType name
	do
		# Probably the 'remove' link
		if [ -z "$mimeType" ]; then
			apiKey=/api/session/
		else
			case "$mimeType" in
			
				application/vnd.vmware.vcloud.orgList+xml)
					apiKey=/api/org/
				;;
				
				application/vnd.vmware.admin.vcloud+xml)
					apiKey=/api/admin/
				;;
				
				# name
				application/vnd.vmware.vcloud.org+xml)
					#"$name"
					continue
					#apiKey=/api/org/3a2900f9-f15c-49d6-8771-bdd8bbebe456
				;;
				
				application/vnd.vmware.vcloud.query.queryList+xml)
					apiKey=/api/query
				;;
				
				application/vnd.vmware.vcloud.entity+xml)
					apiKey=/api/entity/
				;;
				
				application/vnd.vmware.vcloud.apiextensibility+xml)
					apiKey=/api/extensibility
				;;
				
				*)
					continue
				;;
				
			esac
		fi
		
		api_map["$apiKey"]="$href"
		
	# _: means the default namespace (not needed if there's no xmlns definition)
	done < <(heading=0 xml_starlet_extractTsv "$curl_downloadFilePath" '/_:Session/_:Link' '@rel' '@href' '@type' '@name')
	
}

function api_versions()
{
	local -r escapedRelativePathIncludingAnyLeadingAndTrailingSlashes='/api/versions'
	api_map["$escapedRelativePathIncludingAnyLeadingAndTrailingSlashes"]="${configuration_api_baseUrl}${escapedRelativePathIncludingAnyLeadingAndTrailingSlashes}"
	# found from /api/admin/<uuid>, not in the map from /api/sessions
	api_map['/api/supportedSystemsInfo/']="${configuration_api_baseUrl}/api/supportedSystemsInfo/"
	
	declare -A curl_requestHeaders=()
	declare -A curl_responseHeaders=()
	local -i curl_httpResponseCode
	local curl_downloadFilePath
	
	curl_wrapper GET "${api_map["$escapedRelativePathIncludingAnyLeadingAndTrailingSlashes"]}"
	
	if [ $curl_httpResponseCode -ne 200 ]; then
		informationMessage FAIL "Could not connect to $configuration_api_baseUrl (HTTP Response Code was $curl_httpResponseCode)"
		exit 1
	fi
	
	# _: means the default namespace (not needed if there's no xmlns definition)
	temporaryFiles_newFileToRemoveOnExit
	local -r tsvFilePath="$TMP_FILE"
	heading=0 xml_starlet_extractTsv "$curl_downloadFilePath" '/_:SupportedVersions/_:VersionInfo' '_:Version' '_:LoginUrl' >"$tsvFilePath"
	
	if ! grep --quiet "^${configuration_api_version}"$'\t' "$tsvFilePath"; then
		informationMessage FAIL "API version (configuration_api_version) $configuration_api_version is not supported"
		exit 1
	fi
	
	local version
	local sessionsUrl
	IFS=$'\t' read -r -d $'\n' version sessionsUrl <<<"$(grep "^${configuration_api_version}"$'\t' "$tsvFilePath")"
	api_map['/api/sessions']="$sessionsUrl"
}
