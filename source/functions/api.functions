function api_help_colorise()
{
	if [ "$defaults_colour_on" = 'yes' ]; then
		colour_effect "$1" bold
	else
		echo -n "$1"
	fi
}

api_commands=()

function help()
{
	if [ $# -eq 0 ]; then
		echo "Built-in commands are ${main_commands}" 1>&2
		return 0
	fi
	
	local apiCommand apiCommandKnown
	local -i found
	while [ $# -gt 0 ]
	do
		apiCommand="$1"
		found=0
		for apiCommandKnown in "${api_commands[@]}"
		do
			if [ "$apiCommand" = "$apiCommandKnown" ]; then
				api_help_${apiCommand} 1>&2
				echo 1>&2
				found=1
			fi
		done
		if [ $found -eq 0 ]; then
			echo "$apiCommand is not known" 1>&2
		fi
		shift 1
	done
}
api_commands+=(help)

function api_help_help()
{
	echo "$(api_help_colorise "${FUNCNAME:9} [<command>]")  Displays list of commands or help for <command>"
}

function api()
{
	if [ $# -lt 2 ]; then
		vsh_message FAIL "api must specify <format> <action>, eg api $api_format admins"
		return 1
	fi
	local api_format="$1"
	local -r apiCommand="$2"
	shift 2
	
	api_command_${apiCommand} "$@"
	
	download="${downloads[$downloadNumber]}"
	downloadNumber=$((downloadNumber+1))
}
api_commands+=(api)

function api_help_api()
{
	echo "$(api_help_colorise "[api_format=none|xml|FORMAT] [defaults_format_headings=OPTION] [defaults_format_separator=SEPARATOR] ${FUNCNAME:9} <format> <action> [<arguments>...]")  Call an API and return XML"
	printf '%s\n' 'Specify api_format, defaults_format_headings or defaults_format_separator to override the defaults for the output'
}

api_format=xml
function format()
{
	if [ $# -lt 3 ]; then
		vsh_message FAIL "format must specify arguments <format> <formatCommand> files..."
		return 1
	fi
	local api_format="$1"
	local -r formatCommand="$2"
	shift 2
	
	local curl_downloadFilePath
	for curl_downloadFilePath in "$@"
	do
		if [ "$curl_downloadFilePath" = "/dev/null" ]; then
			continue
		fi
		api_format_${formatCommand}
	done
}
api_commands+=(format)

function api_help_format()
{
	echo "$(api_help_colorise "${FUNCNAME:9} <format> <formatCommand> [<files>...]")  Format XML"
	printf '%s\n' 'Where files is a path to a file (or files) or:-'
	printf '\t%s\n' '"$download"          to use the last download'
	printf '\t%s\n' '"${downloads[N]}"    to use a previous download, where N is a zero-based index'
	printf '\t%s\n' '"$downloadVersions"  to use the versions XML downloaded during login'
	printf '\t%s\n' '"$downloadSessions"  to use the session XML downloaded during login'
}

function reset()
{
	local key
	for key in "${!api_downloadsCache[@]}"
	do
		unset api_downloadsCache["${key}"]
	done
}
api_commands+=(reset)

function api_help_reset()
{
	echo "$(api_help_colorise "${FUNCNAME:9}")   Resets all caches"
}

function cached()
{
	# pass function name, arguments
	echo -n "${api_downloadsCache["$(api_call_cache_key "$@")"]}"
}
api_commands+=(cached)

function api_help_cached()
{
	echo "$(api_help_colorise "${FUNCNAME:9}")  Returns a path to a file of cached content based on a key"
	printf '%s\n' 'Use as  "$(cached <api-command> <argument> <argument> ... )"  whereargument is one of the arguments used to the original <api-command>'
}

function GET()
{
	if [ $# -ne 1 ]; then
		vsh_message FAIL "${FUNCNAME} must specify <url>"
		return 1
	fi
    local -r url="$1"
    
    local curl_downloadFilePath
    
    curl_wrapperLoggedInAbsoluteApiCall 200 GET "$url"
    
    cat "$curl_downloadFilePath"
}
api_commands+=(GET)

function api_help_GET()
{
	echo "$(api_help_colorise "${FUNCNAME:9} <url>")  Returns the contents of URL to standard out"
}

function DELETE()
{
	if [ $# -ne 1 ]; then
		vsh_message FAIL "${FUNCNAME} must specify <url>"
		return 1
	fi
    local -r url="$1"
    
    local curl_downloadFilePath
    
    curl_wrapperLoggedInAbsoluteApiCall 202 DELETE "$url"
    
    cat "$curl_downloadFilePath"
}

api_commands+=(DELETE)

function api_help_DELETE()
{
	echo "$(api_help_colorise "${FUNCNAME:9} <url>")  Deletes the URL"
}

function PUT()
{
	if [ $# -ne 2 ]; then
		vsh_message FAIL "${FUNCNAME} must specify <url> <filePath>"
		return 1
	fi
    local -r url="$1"
    local -r filePath="$2"
    
    local curl_downloadFilePath
    
    curl_put="${putFile}" curl_wrapperLoggedInAbsoluteApiCall 202 PUT "$url"
    
    cat "$curl_downloadFilePath"
}

api_commands+=(PUT)

function api_help_PUT()
{
	echo "$(api_help_colorise "${FUNCNAME:9} <url> <filePath>")  PUTs <filePath> to the URL"
}

function POST()
{
	if [ $# -lt 2 ]; then
		vsh_message FAIL "${FUNCNAME} must specify <url> <filePath> [<expectedResponseCode>]"
		return 1
	fi
    local -r url="$1"
    local -r filePath="$2"
    if [ $# -eq 3 ]; then
        local -ir expectedResponseCode=$3
    else
        local -ir expectedResponseCode=202
    fi
    
    local curl_downloadFilePath
    
    curl_post="@${filePath}" curl_wrapperLoggedInAbsoluteApiCall $expectedResponseCode POST "$url"
    
    cat "$curl_downloadFilePath"
}

api_commands+=(POST)

function api_help_POST()
{
	echo "$(api_help_colorise "${FUNCNAME:9} <url> <filePath> [<expectedResponseCode>]")  POSTs <filePath> to the URL; <expectedResponseCode> defaults to 202, but some calls use 201!"
}
