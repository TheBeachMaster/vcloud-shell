#!/usr/bin/env bash

function informationMessage()
{
	local messageKind="$1"
	local message="$2"
	
	case "$messageKind" in
		
		WARN|FAIL)
			echo "$ourName: $messageKind: $message" 1>&2
		;;
		
		DEBUG)
			if [ "$vsh_beDebug" = "yes" ]; then
				echo "$ourName: $messageKind: $message" 1>&2
			fi
		;;
		
		*)
			if [ "$vsh_beVerbose" = "yes" ]; then
				echo "$ourName: $messageKind: $message" 1>&2
			fi
		;;
	
	esac
}

# The purpose of these functions is to provide internal implementations of logic we can't be 100%
# sure of exists in the environment or is implemented as we would like for critical pieces of code.
# Such a critical piece is code executed before and during command line arg parsing (eg exitError)
function vsh_dirname()
{
	local -r converted="${1%/*}"
	if [ "$converted" = "$1" ]; then
		echo "."
	else
		echo "$converted"
	fi
}

function vsh_basename()
{
	echo "${1##*/}"
}

function vsh_setDebugging()
{
	# is set -x on?
	if [[ "$-" == *x* ]]; then
		export VSH_BASH_DEBUGGING="yes"
	elif [ ! -z "$VSH_BASH_DEBUGGING" ]; then
		if [ "$VSH_BASH_DEBUGGING" = "yes" ]; then
			set -x
		fi
	fi
}

function vsh_setSaneEnvironmentDefaults()
{
	set +o allexport -o braceexpand +o emacs -o errexit +o errtrace +o functrace +o hashall +o histexpand +o history +o ignoreeof -o interactive-comments +o keyword +o monitor +o noclobber +o noexec +o noglob +o nolog +o notify +o nounset +o onecmd +o physical +o pipefail +o posix +o verbose +o vi
	
	unset BASH_ENV
	unset BASH_XTRACEFD
	unset CDPATH
	unset ENV
	unset FCEDIT
	unset FIGNORE
	unset FUNCNEST
	unset GLOBIGNORE
	unset HISTCONTROL
	unset HISTFILE
	unset HISTFILESIZE
	unset HISTIGNORE
	unset HISTSIZE
	unset HISTTIMEFORMAT
	unset HOSTFILE
	unset IGNOREEOF
	unset INPUTRC
	unset MAIL
	unset MAILCHECK
	unset MAILPATH
	unset TMOUT
	
	umask 022
}

function vsh_findOurNameAndPath()
{
	readonly ourName="$(vsh_basename "$0")"
	pushd "$(vsh_dirname "$0")" >/dev/null
		readonly crudeOurPath="$(pwd)"
	popd >/dev/null
}

function exitError()
{
	local -r error="$1"
	echo "$ourName: $error" 1>&2
	exit 1
}

function exitHelp()
{
	echo -n -E "Usage: ${ourName} -h
Usage: ${ourName} [-v] [-d] [-p] [-c vsh_configPath] [-n vsh_netrcFilePath ] [-r vsh_curlrcFilePath] -- [script files...]

Argument-less Switches
    Switch  Explanation            Default              Configuration*
    -h      show this help
    -v      be more verbose        ${vsh_beVerbose}  beVerbose
    -d      output debug messages  ${vsh_beDebug}    beDebug
    -p      interactive prompt     ${vsh_bePrompt}   bePrompt

Argumented Switches
    Switch  Configuration*            Default
    -c      vsh_configPath         ${vsh_configPath}
    -n      vsh_netrcFilePath      ${vsh_netrcFilePath} (not used if not present)
    -r      vsh_curlrcFilePath     ${vsh_curlrcFilePath} (not used if not present)
    -u      vsh_baseUrl            ${vsh_baseUrl}
    --                                End of arguments, beginning of script files

*See Switch Configuration below

Interactive Prompt
If invoked with -p, input is read from prompted for from stdin. It is an error to then specify script files.

script files
These are one or more files containing scripts of commands. By default (if no scripts are provided), or if a value '-' is specified, stdin is read.
Each script is a line of commands. Commands are either ordinary bash syntax, or one of the following:-

    api <format> <action> [<arg> ...]      run an api command (see below)
    format <format> <with-header> <action> [files]  format files (if not specified, defaults to last api call's raw XML)
    reset                                  cleans out the cache used for GET calls

Since commands are normal bash syntax, environment variables can be set before use, eg to control header lines in output:-

    defaults_format_headings=with-heading capture api tsv supportedSystemsInfo

apis can have a <format> which outputs to stdout. Common values are below (note that some apis may have additional formats)

    none       do not format (do not output to stdout)
    xml        output raw XML
    id-bash*   output bash source-able key-values
    id-tsv*    output TSV key-values
    links*     output links in TSV format
    tsv*       output TSV data
    settings*  output TSV settings

* not supported by all formats. Each api call can have its standard out captured using 'capture'. Each api call has any downloaded data stored in raw (XML) in the
array  downloads  , organised by line number of the commands (zero-based).

api calls currently defined

    orgs        List of organisations
    org <name>  Org details for <name>, eg 98-184-1-151d73
    ... [TODO: Generate this list, and the supported formats]

Switch Configuration
Command line switches (vsh_) can be specified using a key=value file (with quoting if value contains spaces or characters special to the shell).
These files are read BEFORE the command line is processed, allowing per-invocation override. By default, the following locations are searched and
files sourced as configuration in order:-

    ${vsh_configPathOriginal}/switch-configuration
    ~/.${ourName}
    <VSH_CONFIGURATION>  (an environment variable)

Format
Format controls output. The list of valid api_formats varies by command, but xml is always supported and links produces links.

netrc Files
netrc files and are used to specify user name and password credentials. netrc files are searched for automatically
unless  -n vsh_netrcFilePath  is specified.
The locations searched in order are:-

    <CURL_HOME>/.netrc
    <HOME>/.netrc
    ${etcPath}/netrc
    <vsh_configPath>/netrc
    <HOME>/$ourName.netrc

If more than one file is found, then the last one found is the one used.

The netrc file should consist of lines in the format machine HOSTNAME login USER@ORGANIZATION password PASSWORD. The first
matching entry is used, or, if no matching entries are present, the final 'default' entry. More details are in  man 5 netrc.

HOSTNAME should be that of the vCloud portal. For Skyscape, it is  api.vcd.portal.skyscapecloud.com . In the vCloud 5.1 API
documentation, this is the value 'vcloud.example.com'.

curlc Files
curlrc files are used to specify additional options for curl. A typical use case is to configure proxy servers. curlc files are searched
for automatically unless  -r vsh_curlrcFilePath is specified.  By default, the locations searched in order are:-

    <CURL_HOME>/.curlrc
    <HOME>/.curlrc
    ${etcPath}/curlrc
    <vsh_configPath>/curlrc
    <vsh_configPath>/curlrc.d/*.curlrc
    <HOME>/$ourName.curlrc
    <vsh_curlrcFilePath>

If more than one file is found, then all are used, with any conflicting settings resolved with 'last one wins'.

Please note that not all curl configuration will be honoured, as we explicitly set --url, etc

Defaults
Defaults are used to control common use cases. Defaults for values are sourced as key=value pairs from the following locations:-
    
    Location                                   Currently
    <vsh_configPath>/defaults               ${vsh_configPath}.d/defaults
    <vsh_configPath>/defaults.d/*.defaults  ${vsh_configPath}.d/defaults.d/*.defaults

The values that can be configured are:-
    
    Value                      Built-in Value
    defaults_api_version       ${defaults_api_version}
    defaults_curl_userAgent    ${defaults_curl_userAgent}
    defaults_curl_maxRedirs    ${defaults_curl_maxRedirs}
    defaults_curl_retries      ${defaults_curl_retries}
    defaults_format_headings   ${defaults_format_headings} (no-heading or with-heading)
    defaults_format_separator  ${defaults_format_separator} (tab)

Paths
A path is used to define the location of essential programs used during initial bootstrapping. It also defines a packageManager
to automatically install any missing dependencies. The PATH variable is reset to empty if they are used. Paths are used if a file
<vsh_configPath>/paths.d/<distributionName> exists for the detected <distributionName>.
" 1>&2
	exit $1
}

vsh_scriptFiles=()
function vsh_loadAnyConfiguration()
{
	readonly vsh_configPathOriginal="$crudeOurPath"/config
	
	# Switch embedded defaults
	vsh_language="en_GB.UTF-8"
	vsh_beVerbose="no"
	vsh_beDebug="no"
	vsh_bePrompt="no"
	
	vsh_netrcFilePath=""
	vsh_curlrcFilePath=""
	vsh_baseUrl="https://api.vcd.portal.skyscapecloud.com"
	vsh_scriptFiles=('-')
#start VSH_CONFIG_PATH
	etcPath="/etc"
	vsh_configPath="$vsh_configPathOriginal"
#end VSH_CONFIG_PATH
#start VSH_DEFAULTS
	# Insert all our defaults as shipped, too
#end VSH_DEFAULTS
	
	function vsh_makeVariablesReadonly()
	{
		readonly vsh_language vsh_beVerbose vsh_beDebug vsh_bePrompt vsh_netrcFilePath vsh_curlrcFilePath vsh_baseUrl etcPath vsh_configPath
		readonly -a vsh_scriptFiles
	}
	
	local -r etcSwitchConfiguration="${vsh_configPathOriginal}"/switch-configuration
	if [ -f "$etcSwitchConfiguration" ]; then
		source "$etcSwitchConfiguration"
	fi
	
	local -r userSwitchConfiguration=~/."$ourName"
	if [ -r "$userSwitchConfiguration" ]; then
		source "$userSwitchConfiguration"
	fi
	
	local -r environmentVariableSwitchConfiguration="$VSH_CONFIGURATION"
	if [ -n "$environmentVariableSwitchConfiguration" ]; then
		if [ -r "$environmentVariableSwitchConfiguration" ]; then
			source "$environmentVariableSwitchConfiguration"
		fi
	fi
}

function vsh_parseCommandLine()
{
	local OPTERR=1
	local OPTIND=1
	local OPTARG
	local option
	while getopts :hvdpc:s:n:r: option
	do
		case "$option" in
			
			h)
				exitHelp 2
			;;
			
			v)
				vsh_beVerbose="yes"
			;;
			
			d)
				vsh_beDebug="yes"
			;;
			
			p)
				vsh_bePrompt="yes"
				vsh_scriptFiles=()
			;;
			
			c)
				vsh_configPath="$OPTARG"
			;;
			
			u)
				vsh_baseUrl="$OPTARG"
			;;
			
			n)
				vsh_netrcFilePath="$OPTARG"
			;;
			
			r)
				vsh_curlrcFilePath="$OPTARG"
			;;
			
			'?')
				exitError "Invalid option -${OPTARG}"
			;;
			
		esac
	done
	
	shift $((OPTIND - 1))
	
	if [ $# -ne 0 ]; then
		if [ "$vsh_bePrompt" = "yes" ]; then
			exitError "Can not set -p and have script files"
		fi
		vsh_scriptFiles=("$@")
	fi
}

function vsh_validateCommandLineArguments()
{
	if [ ! -d "$vsh_configPath" ]; then
		exitError "Config path $vsh_configPath does not exist or is not a directory"
		pushd "$vsh_configPath" 1>/dev/null
			vsh_configPath="$(pwd)"
		popd 1>/dev/null
	fi
	
	if [ -n "$vsh_netrcFilePath" ]; then
		if [ ! -f "$vsh_netrcFilePath" ]; then
			exitError "-n vsh_netrcFilePath $vsh_netrcFilePath does not exist or is not a file"
		fi
	fi
	
	if [ -n "$vsh_curlrcFilePath" ]; then
		if [ ! -f "$vsh_curlrcFilePath" ]; then
			exitError "-r vsh_curlrcFilePath $vsh_curlrcFilePath does not exist or is not a file"
		fi
	fi
}


#start VSH_SOURCE_FUNCTIONS
function vsh_sourceFunctions()
{
	vsh_sourceFunctionsRecursively "$crudeOurPath"/functions
}

function vsh_sourceFunctionsRecursively()
{
	local -r pathToFunctions="$1"
	pushd "$pathToFunctions" 1>/dev/null 2>/dev/null
		
		local functionFile
		for functionFile in *.functions
		do
			if [ -f "$functionFile" ]; then
				source "$functionFile"
			fi
		done
		
		local functionFolder
		for functionFolder in *
		do
			if [ -d "$functionFolder" ]; then
				vsh_sourceFunctionsRecursively "$functionFolder"
			fi
		done
		
	popd 1>/dev/null 2>/dev/null
}
#end VSH_SOURCE_FUNCTIONS

function vsh_main()
{
	vsh_setDebugging
	vsh_setSaneEnvironmentDefaults
	vsh_findOurNameAndPath
	vsh_loadAnyConfiguration
	vsh_parseCommandLine "$@"
	vsh_validateCommandLineArguments
	vsh_makeVariablesReadonly
	vsh_sourceFunctions
	
	declare -A api_map
	main_executeMainFunctions
}

vsh_main "$@"
